Is Prime:
        public static class PrimeTool //call with * bool prime = PrimeTool.IsPrime(count); *
        {
            public static bool IsPrime(int candidate)
            {
                // Test whether the parameter is a prime number.
                if ((candidate & 1) == 0)
                {
                    if (candidate == 2)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                //This version was changed to test the square.
                //Original version tested against the square root.
                //Also we exclude 1 at the end.
                for (int i = 3; (i * i) <= candidate; i += 2)
                {
                    if ((candidate % i) == 0)
                    {
                        return false;
                    }
                }
                return candidate != 1;
            }
        }

Is Palindrome:
        public static bool IsPalindrome(string potentialPalindrome)
        {
            int min = 0;
            int max = potentialPalindrome.Length - 1;
            while (true)
            {
                if (min > max)
                {
                    return true;
                }
                char a = potentialPalindrome[min];
                char b = potentialPalindrome[max];
                if (char.ToLower(a) != char.ToLower(b))
                {
                    return false;
                }
                min++;
                max--;
            } //All of this works
        }

Pythagorean Triplet Gen (+ Driver):
        public static class GFG
        {
            // Function to generate pythagorean triplets smaller than limit 
            public static void pythagoreanTriplets(int limit)
            {
                // triplet: a^2 + b^2 = c^2 
                int a, b, c = 0;

                // loop from 2 to max_limit 
                int m = 2;

                // Limiting c would limit 
                // all a, b and c 
                while (c < limit)
                {
                    // now loop on j from 1 to i-1 
                    for (int n = 1; n < m; ++n)
                    {
                        // Evaluate and print 
                        // triplets using 
                        // the relation between 
                        // a, b and c 
                        a = m * m - n * n;
                        b = 2 * m * n;
                        c = m * m + n * n;

                        if (c > limit)
                            break;

                        Console.WriteLine(a + " "
                                    + b + " " + c);
                    }
                    m++;
                }
            }
            // Driver Code 
            public static void Main()
            {
                int limit = 20;
                pythagoreanTriplets(limit);
            }
        }
