Problem #1: Multiples of 3 or 5
Solution: 233168
        static void Main(string[] args)
        {
            int result = 0;
            int count;
            for (count = 3; count < 1000; count++)
            {
                if (count % 3 == 0 || count % 5 == 0)
                {
                    result += count;
                }
            }
            Console.WriteLine(result);
        }

Problem #2: Even Fibonacci Numbers
Solution: 4613732

Problem #3: Largest Prime Factor
Solution: 6857

Problem #4: Largest Palindrome Product
Solution: 906609

Problem #5: Smallest Multiple
Solution: 232792560
        static void Main(string[] args)
        {
            int testNum = 2520;
            bool fullyDivisible = false;
            int modulo = 20;
            while (fullyDivisible == false)
            {
                if (testNum % modulo == 0)
                {
                    modulo--;
                    if (modulo == 1)
                    {
                        Console.WriteLine(testNum + " is divisible");
                    }
                }
                else
                {
                    testNum++;
                    modulo = 20;
                }
            }
        }

Problem #6: Square Sum Difference
Solution: 25164150
        static void Main(string[] args)
        {
            int count;
            double sumOfSquares = 0;
            double squareOfSums = 0;
            for (count = 1; count < 101; count++)
            {
                sumOfSquares += Math.Pow(count, 2); //works fine
                squareOfSums += count;
            }
            squareOfSums = Math.Pow(squareOfSums, 2);
            Console.WriteLine(squareOfSums - sumOfSquares);
        }

Problem #7: 10001st Prime
Solution: 104743
        static void Main(string[] args)
        {
            bool prime;
            int count = 0;
            int numPrime = 0;
            while (numPrime != 10001) //iterate while counter of primes found != 10001
            {
                prime = PrimeTool.IsPrime(count); //calls IsPrime to confirm whether or not count is prime
                if (prime) //if count is prime, run code
                {
                    numPrime++; //increase counter of primes
                    Console.WriteLine("numPrime: " + numPrime);
                }
                Console.WriteLine("count: " + count); //outputs number checked, and answer
                count++; //iterate to check next number
            }
        }

Problem #8: Largest Product In A Series
Solution: 23514624000
        static void Main(string[] args)
        {
            string thousandDigits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
            Int64 saveProd = 1;
            Int64 newProd = 1;
            for (int i = 0; i < 987; i++)
            {
                for (int j = 0; j < 13; j++)
                {
                    newProd *= Convert.ToInt64((thousandDigits.Substring(i, 14)).Substring(j, 1));
                }
                if (newProd > saveProd)
                {
                    saveProd = newProd;
                }
                newProd = 1;
            }
            Console.WriteLine("Greatest product of any 13 adjacent digits: " + saveProd);
        }

Problem #10: Summation of Primes
Solution: 142913828922
        static void Main(string[] args)
        {
            int count;
            long primeSum = 0;
            for (count = 2; count < 2000000; count++)
            {
                bool prime = PrimeTool.IsPrime(count);
                if (prime)
                {
                    Console.WriteLine("Prime found: " + count);
                    primeSum += count;
                }
            }
            Console.WriteLine("Sum of primes below 2000000: " + primeSum);
        }
        //got 1179908154, it is not 1179908154
        //Decided to use long instead of int for primeSum
        //got 142913828922, is is 142913828922

Problem #22: Names Scores
Solution: 871198282
        static void Main(string[] args) //U:/Five-ThousandFirstNames.txt
        {
            StreamReader file = new StreamReader("U:/Five-ThousandFirstNames.txt"); //specified file path here
            string csv = file.ReadToEnd(); //read text file here
            int alphPosition;
            int letterValue;
            int nameValue = 0;
            int nameScore = 0;
            int totalScore = 0;

            //now have to turn variable 'csv' into names separated only by commas
            csv = csv.Replace('"', ' '); //replaces speech marks with spaces
            csv = csv.Replace(" ", ""); //replaces the spaces with null strings (convoluted, i know)
            string[] names = csv.Split(','); //splits values in 'csv' at their commas, and assigns each value to an array
            Array.Sort(names); //alphabetises the array

            foreach(string name in names)
            {
                alphPosition = Array.IndexOf(names, name) + 1; //finds alphabetical position each 'name' in 'names'
                foreach (char letter in name) 
                {
                    letterValue = (Convert.ToInt32(letter) - 64); //converts ASCII of each letter to its alphabetical value
                    nameValue += letterValue; //sum of alphabetical values = name value
                }
                nameScore = nameValue * alphPosition; //multiply each name's value and alphabetical position for its score
                nameValue = 0;
                totalScore += nameScore; //sum of all name scores is the total name score
            }
            Console.WriteLine(totalScore); //the total name score is the answer to the question
        }
