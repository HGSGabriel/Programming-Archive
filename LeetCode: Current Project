using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LeetCode_Space
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 2, 7, 11, 15 };
            int target = 9;
            int remaining = 0;
            int index1 = 0;
            int index2 = 0;
            for (int i = 0; i < nums.Length; i++)
            {
                remaining = target - nums[i];
                index1 = Array.IndexOf(nums, nums[i]);
                for (int j = i + 1; j < nums.Length; j++)
                {
                    if (remaining - nums[j] == 0)
                    {
                        index2 = Array.IndexOf(nums, nums[j]);
                        Console.WriteLine(index1);
                        Console.WriteLine(index2);
                    }
                }
            }
        }
    }
}
//you have an array of integers called 'nums'
//there is a given 'target' integer
//return the indices of two numbers that sum for 'target'

WORKS! But will LeetCode accept it?

CODE BELOW IS MORE LEETCODE WORTHY
public class Solution {
    public int[] TwoSum(int[] nums, int target)
    {
            int remaining = 0;
            int index1 = 0;
            int index2 = 0;
            for (int i = 0; i < nums.Length; i++)
            {
                remaining = target - nums[i];
                index1 = Array.IndexOf(nums, nums[i]);
                for (int j = i + 1; j < nums.Length; j++)
                {
                    if (remaining - nums[j] == 0)
                    {
                        index2 = Array.IndexOf(nums, nums[j]);
                        return index1 + "," + index2;
                    }
                }
                return "";
            }
    }
}


LATEST
           int[] nums = new int[] { 2, 7, 11, 15 };
            int target = 9;
            int remaining = 0;
            int index1 = 0;
            int index2 = 0;
            for (int i = 0; i < nums.Length; i++)
            {
                remaining = target - nums[i];
                index1 = Array.IndexOf(nums, nums[i]);
                for (int j = i + 1; j < nums.Length; j++)
                {
                    if (remaining - nums[j] == 0)
                    {
                        index2 = Array.IndexOf(nums, nums[j]);
                        return Convert.ToString(index1) + "," + Convert.ToString(index2);
                    }
                }
            }
            return "";
